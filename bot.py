import os
import logging
import pdfkit
import shutil
import zipfile
from telegram import Update, InputFile
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (–ø–æ–ª–µ–∑–Ω–æ –¥–ª—è Render)
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TG_TOKEN = os.environ.get("TG_TOKEN")

# –ü–∞–ø–∫–∞ –¥–ª—è wkhtmltopdf (–µ—Å–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ –∏–ª–∏ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏)
WKHTMLTOPDF_PATH = './wkhtmltopdf/wkhtmltopdf'

# –ü—Ä–æ–≤–µ—Ä–∏–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ wkhtmltopdf –∏ —Å–¥–µ–ª–∞–µ–º –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º
if os.path.isfile(WKHTMLTOPDF_PATH):
    os.chmod(WKHTMLTOPDF_PATH, 0o755)

# PDFKit –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
config = pdfkit.configuration(wkhtmltopdf=WKHTMLTOPDF_PATH)

# –ü–∞–ø–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
UPLOAD_DIR = "uploads"


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã –û—Ç–ø—Ä–∞–≤—å HTML —Ñ–∞–π–ª—ã, –∑–∞—Ç–µ–º –∫–æ–º–∞–Ω–¥—É /convert")


async def handle_html(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    user_dir = os.path.join(UPLOAD_DIR, user_id)
    os.makedirs(user_dir, exist_ok=True)

    file = update.message.document
    file_path = os.path.join(user_dir, file.file_name)

    await file.get_file().download_to_drive(file_path)
    await update.message.reply_text(f"‚úÖ –§–∞–π–ª –ø–æ–ª—É—á–µ–Ω: {file.file_name}")


async def convert(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    user_dir = os.path.join(UPLOAD_DIR, user_id)

    if not os.path.isdir(user_dir):
        await update.message.reply_text("‚ùå –ù–µ—Ç HTML —Ñ–∞–π–ª–æ–≤.")
        return

    pdf_dir = os.path.join(user_dir, "pdf")
    os.makedirs(pdf_dir, exist_ok=True)

    errors = []

    for filename in os.listdir(user_dir):
        if filename.endswith(".html"):
            html_path = os.path.join(user_dir, filename)
            pdf_path = os.path.join(pdf_dir, filename.replace(".html", ".pdf"))
            try:
                pdfkit.from_file(html_path, pdf_path, configuration=config)
            except Exception as e:
                errors.append(f"{filename}: {str(e)}")

    # –°–æ–∑–¥–∞–Ω–∏–µ ZIP
    zip_path = os.path.join(user_dir, "converted.zip")
    with zipfile.ZipFile(zip_path, 'w') as zipf:
        for filename in os.listdir(pdf_dir):
            file_path = os.path.join(pdf_dir, filename)
            zipf.write(file_path, arcname=filename)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞—Ä—Ö–∏–≤–∞
    await update.message.reply_document(InputFile(zip_path))

    if errors:
        error_text = "\n".join(errors)
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∏:\n{error_text}")

    # –û—á–∏—Å—Ç–∫–∞
    shutil.rmtree(user_dir)


def main():
    app = ApplicationBuilder().token(TG_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("convert", convert))
    app.add_handler(MessageHandler(filters.Document.FileExtension("html"), handle_html))

    app.run_polling()


if __name__ == "__main__":
    main()
